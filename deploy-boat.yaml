---
  - name: "create solar directory"
    hosts: localhost
    connection: local
    tasks:

    - name: create directory
      ansible.builtin.file:
        path: /opt/solar
        state: directory
        mode: '0755'
      become: yes

    - name: Change file ownership and group
      ansible.builtin.file:
        recurse: true
        path: /opt/solar
        owner: '{{ ansible_user_id }}'
        group: '{{ ansible_user_id }}'
      become: yes

  - name: "clone or pull repos"
    hosts: localhost
    connection: local
    tasks:

    - name: Git checkout boat-connector
      ansible.builtin.git:
        repo: 'https://github.com/mospolytech-solar-regatta/solar-boat-connector.git'
        dest: /opt/solar/solar-boat-connector

    - name: Git checkout connector
      ansible.builtin.git:
        repo: 'https://github.com/mospolytech-solar-regatta/solar-connector.git'
        dest: /opt/solar/solar-connector


  - name: "install deps"
    hosts: localhost
    connection: local
    tasks:

    - name: Install apt deps
      apt:
        name:
          - libpq-dev
          - python3-dev
          - python3-virtualenv
          - snapd
      become: yes

    - name: Install psycopg2 module
      ansible.builtin.pip:
        name: psycopg2
      become: yes

    - name: Install redis
      apt:
        name:
          - redis
      become: yes

    - name: Ensure that redis is started
      ansible.builtin.service:
        name: redis
        state: started

    - name: Install postgres
      apt:
        name:
          - postgresql-15
      become: yes

    - name: Ensure that postgresql is started
      ansible.builtin.service:
        name: postgresql
        state: started

    - name: Install virtualenv module
      ansible.builtin.pip:
        name: virtualenv

  - name: "setup postgresql"
    hosts: localhost
    connection: local
    tasks:

    - name: "Create app database"
      postgresql_db:
        state: present
        name: "{{ db_name }}"
      become: yes
      become_user: postgres

    - name: "Create db user"
      postgresql_user:
        state: present
        name: "{{ db_user }}"
        password: "{{ db_password }}"
      become: yes
      become_user: postgres

    - name: "Grant db user access to app db"
      postgresql_privs:
        type: database
        database: "{{ db_name }}"
        roles: "{{ db_user }}"
        grant_option: no
        privs: all
      become: yes
      become_user: postgres

  - name: "setup solar-boat-connector"
    hosts: localhost
    connection: local
    tasks:

    - name: check if virtualenv library already installed or not
      ansible.builtin.stat:
        path: /opt/solar/solar-boat-connector/venv
      register: pip_virtualenv_installed

    - name: Create Python3-virtual environment folder
      ansible.builtin.file:
        name: /opt/solar/solar-boat-connector/venv
        state: directory

    - name: Initiate virtualenv
      ansible.builtin.pip:
        virtualenv: /opt/solar/solar-boat-connector/venv
        virtualenv_command: "python3 -m venv"
        requirements: /opt/solar/solar-boat-connector/requirements.txt

    - name: create .env file
      ansible.builtin.copy:
        src: /opt/solar/solar-boat-connector/example.env
        dest: /opt/solar/solar-boat-connector/.env
        force: no

    - name: migrate db
      ansible.builtin.command: venv/bin/alembic upgrade head
      args:
        chdir: /opt/solar/solar-boat-connector
      environment:
        POSTGRES_USER: '{{ db_user }}'
        POSTGRES_DB: '{{ db_name }}'
        POSTGRES_SERVER: 'localhost'
        POSTGRES_PASSWORD: '{{ db_password }}'


  - name: "setup solar-connector"
    hosts: localhost
    connection: local
    tasks:

    - name: check if virtualenv library already installed or not
      ansible.builtin.stat:
        path: /opt/solar/solar-connector/venv
      register: pip_virtualenv_installed

    - name: Create Python3-virtual environment folder
      ansible.builtin.file:
        name: /opt/solar/solar-connector/venv
        state: directory

    - name: Initiate virtualenv
      ansible.builtin.pip:
        virtualenv: /opt/solar/solar-connector/venv
        virtualenv_command: "python3 -m venv"
        requirements: /opt/solar/solar-connector/requirements.txt

    - name: create .env file
      ansible.builtin.copy:
        src: /opt/solar/solar-connector/example.env
        dest: /opt/solar/solar-connector/.env
        force: no

  - name: "create services"
    hosts: localhost
    connection: local
    tasks:

    - name: Copy solar-connector file
      ansible.builtin.copy:
        src: arduino_connector.service
        dest: /etc/systemd/system/arduino_connector.service
      become: yes

    - name: Copy file solar-boat-connector service file
      ansible.builtin.copy:
        src: connector.service
        dest: /etc/systemd/system/connector.service
      become: yes

    - name: Just force systemd to reread configs (2.4 and above)
      ansible.builtin.systemd:
        daemon_reload: yes
      become: yes

    - name: Make sure connector service unit is running
      ansible.builtin.systemd:
        state: started
        enabled: yes
        name: connector.service
      become: yes

    - name: Make sure arduino_connector service unit is running
      ansible.builtin.systemd:
        state: started
        enabled: yes
        name: arduino_connector.service
      become: yes

  - name: "update monitor"
    hosts: localhost
    connection: local
    tasks:

    - name: Install monitor with option --channel=latest/edge
      community.general.snap:
        name: mospolytech-solar-monitor
        channel: latest/edge
